plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    // 최신버전 JIB 추가
    id("com.google.cloud.tools.jib") version "3.4.2"
}

group = 'com.tmax'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // 테스트 관련 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // prometheus
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // swagger 의존성
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // MySQL JDBC 드라이버
    implementation 'mysql:mysql-connector-java:8.0.33'

    // Mapper(MapStruct)
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // QueryDSL 스프링 부트 3.0 이상
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"

    // javax -> jakarta java17 이상
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = "${rootProject.name}.jar"
}

jib {
    // 애플리케이션을 빌드할 기본 이미지를 구성
    from {
        image = "openjdk:17.0.2-slim"
    }
    // 애플리케이션을 빌드할 대상 이미지를 구성
    to {
        // 이미지는 dockerhub에 만들어준 repo
        image = "jasaeong93/talkstream"
        tags = ["0.0.2"]

        auth {
            username = dockerUsername
            password = dockerPassword
        }
    }
    // 빌드된 이미지에서 실행될 컨테이너를 구성
    container {
        jvmFlags = [
                "-Dspring.profiles.active=local",
                "-Dfile.encoding=UTF-8"]
        setAllowInsecureRegistries(true)  // 보안이 적용되지 않은 registry 연결 허용
    }
}
